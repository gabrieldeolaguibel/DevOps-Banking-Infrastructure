name: ie-bank-infra

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - 'feature/**'
  workflow_dispatch:

env:
  RESOURCE_GROUP_DEV: aguadamillas_students_1
  RESOURCE_GROUP_UAT: aguadamillas_students_2
  SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  SUBSCRIPTION_ID_UAT: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  USER_ALIAS: monke

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Run Bicep linter
        run: az bicep build --file ./main.bicep
        
  check-deploy-keyvault:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check_kv.outputs.exists }}
    steps:
      - uses: actions/checkout@main
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Check if Key Vault exists
        id: check_kv
        run: |
          EXISTS=$(az keyvault list --resource-group ${{ env.RESOURCE_GROUP_DEV }} --query "[?name=='YourKeyVaultName'].name" -o tsv)
          if [ -z "$EXISTS" ]; then
            echo "::set-output name=exists::false"
          else
            echo "::set-output name=exists::true"
          fi

  deploy-key-vault:
    runs-on: ubuntu-latest
    needs: check-deploy-keyvault
    if: needs.check-deploy-keyvault.outputs.exists == 'false'
    steps:
      - uses: actions/checkout@main
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy Key Vault
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
          template: ./key-vault.bicep
          parameters: ./parameters/key-vault.parameters.json
          deploymentName: keyvault-${{ github.run_id }}
          failOnStdErr: false

  deploy-acr:
    runs-on: ubuntu-latest
    needs: [check-deploy-keyvault, deploy-key-vault]
    if: (needs.check-deploy-keyvault.outputs.exists == 'true') || (needs.deploy-key-vault.result == 'success')
    steps:
      - uses: actions/checkout@main
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy Azure Container Registry
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
          template: ./acr.bicep
          parameters: ./parameters/acr.parameters.json
          deploymentName: acr-deployment-${{ github.run_number }}
          failOnStdErr: false

  deploy-dev:
    if: startsWith(github.ref, 'refs/heads/feature/')
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
    env:
      ENV: dev
    steps:
      - uses: actions/checkout@main
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
          template: ./main.bicep
          parameters: ./parameters/dev.parameters.json appServiceAPIEnvVarENV=${{ env.ENV }} appServiceAPIEnvVarDBHOST=${{ vars.DBHOST_DEV }} appServiceAPIEnvVarDBNAME=${{ vars.DBNAME_DEV }} appServiceAPIEnvVarDBPASS=${{ secrets.DBPASS }} appServiceAPIDBHostDBUSER=${{ secrets.DBUSER }} appServiceAPIDBHostFLASK_APP=${{ vars.FLASK_APP }} appServiceAPIDBHostFLASK_DEBUG=${{ vars.FLASK_DEBUG }}
          deploymentName: ${{ env.USER_ALIAS }}
          failOnStdErr: false


  deploy-uat:
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'feature/') && github.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    environment:
      name: "User Acceptance Testing"
    env:
      ENV: uat
    steps:
      - uses: actions/checkout@main
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_UAT }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_UAT }}
          template: ./main.bicep
          parameters: ./parameters/uat.parameters.json appServiceAPIEnvVarENV=${{ env.ENV }} appServiceAPIEnvVarDBHOST=${{ vars.DBHOST_UAT }} appServiceAPIEnvVarDBNAME=${{ vars.DBNAME_UAT }} appServiceAPIEnvVarDBPASS=${{ secrets.DBPASS }} appServiceAPIDBHostDBUSER=${{ secrets.DBUSER }} appServiceAPIDBHostFLASK_APP=${{ vars.FLASK_APP }} appServiceAPIDBHostFLASK_DEBUG=${{ vars.FLASK_DEBUG }}
          deploymentName: ${{ env.USER_ALIAS }}
          failOnStdErr: false

  deploy-prod:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: [build, deploy-uat]
    environment:
      name: "Production"
    env:
      ENV: prod
    steps:
      - uses: actions/checkout@main
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_UAT }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_UAT }}
          template: ./main.bicep
          parameters: ./parameters/uat.parameters.json appServiceAPIEnvVarENV=${{ env.ENV }} appServiceAPIEnvVarDBHOST=${{ vars.DBHOST_PROD }} appServiceAPIEnvVarDBNAME=${{ vars.DBNAME_PROD }} appServiceAPIEnvVarDBPASS=${{ secrets.DBPASS }} appServiceAPIDBHostDBUSER=${{ secrets.DBUSER }} appServiceAPIDBHostFLASK_APP=${{ vars.FLASK_APP }} appServiceAPIDBHostFLASK_DEBUG=${{ vars.FLASK_DEBUG }}
